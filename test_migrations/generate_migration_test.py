#!/usr/bin/env python
"""
Test script to generate migration and verify STI behavior.
"""

import os
import sys
import django
from django.conf import settings

# Add parent directory to path for local django_sti_models
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Configure minimal Django
if not settings.configured:
    settings.configure(
        DEBUG=True,
        DATABASES={
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': ':memory:',
            }
        },
        INSTALLED_APPS=[
            'django.contrib.contenttypes',
            'django.contrib.auth',
        ],
        USE_TZ=True,
    )

django.setup()

# Import after Django setup
from django.db import models
from django_sti_models import TypedModel, TypeField


class AugendModel(TypedModel):
    """Abstract base model with TypeField - simulates your AugendModel."""
    model_type = TypeField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        abstract = True
        app_label = 'test_app'


class Business(AugendModel):
    """Concrete business model - simulates your Business model."""
    name = models.CharField(max_length=255)

    class Meta:
        verbose_name_plural = "Businesses"
        app_label = 'test_app'

    def __str__(self):
        return self.name


class BusinessExtension(Business):
    """Business extension - simulates your BusinessExtension model."""
    description = models.TextField(blank=True, default="")

    class Meta:
        verbose_name_plural = "Business Extensions"
        app_label = 'test_app'

    def __str__(self):
        return self.name


def analyze_models():
    """Analyze the models and show what kind of migration would be generated."""
    print("üß™ Testing Migration Generation with Fixed STI\n")
    
    print("üìù Model Analysis:")
    print(f"  AugendModel._meta.abstract: {getattr(AugendModel._meta, 'abstract', None)}")
    print(f"  Business._meta.abstract: {getattr(Business._meta, 'abstract', None)}")
    print(f"  Business._meta.is_sti_base: {getattr(Business._meta, 'is_sti_base', None)}")
    print(f"  Business._meta.proxy: {getattr(Business._meta, 'proxy', None)}")
    print(f"  BusinessExtension._meta.is_sti_subclass: {getattr(BusinessExtension._meta, 'is_sti_subclass', None)}")
    print(f"  BusinessExtension._meta.proxy: {getattr(BusinessExtension._meta, 'proxy', None)}")
    
    print(f"\nüóÉÔ∏è Table Information:")
    print(f"  Business table: {Business._meta.db_table}")
    print(f"  BusinessExtension table: {BusinessExtension._meta.db_table}")
    print(f"  Tables match: {Business._meta.db_table == BusinessExtension._meta.db_table}")
    
    print(f"\nüìã Field Analysis:")
    business_fields = [f.name for f in Business._meta.get_fields()]
    extension_fields = [f.name for f in BusinessExtension._meta.get_fields()]
    print(f"  Business fields: {business_fields}")
    print(f"  BusinessExtension fields: {extension_fields}")
    
    # Simulate migration generation
    print(f"\nüèóÔ∏è Expected Migration Content:")
    print("  Based on the model analysis, the migration should contain:")
    
    if getattr(Business._meta, 'is_sti_base', False):
        print("  ‚úÖ One CreateModel operation for Business (STI base)")
        print("  ‚úÖ TypeField included in Business model")
        
        if getattr(BusinessExtension._meta, 'proxy', False):
            print("  ‚úÖ NO separate CreateModel for BusinessExtension (proxy model)")
            print("  ‚úÖ NO OneToOneField pointer (STI behavior)")
        else:
            print("  ‚ùå Separate CreateModel for BusinessExtension (MTI behavior)")
            print("  ‚ùå OneToOneField pointer would be created")
    else:
        print("  ‚ùå Business is not properly configured as STI base")
    
    # Generate sample migration content
    print(f"\nüìÑ Sample Migration File:")
    print("="*80)
    
    migration_content = f"""# Generated by Django with STI fix
import django.db.models.deletion
import django_sti_models.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Business',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_type', django_sti_models.fields.TypeField(choices=[], db_index=True, editable=False, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, default='')),
            ],
            options={{
                'verbose_name_plural': 'Businesses',
            }},
        ),"""
    
    if getattr(BusinessExtension._meta, 'proxy', False):
        migration_content += """
        # NOTE: BusinessExtension is a proxy model, so no separate CreateModel operation needed
        # Django will automatically handle the proxy model relationship
    ]
}
"""
    else:
        migration_content += """
        migrations.CreateModel(
            name='BusinessExtension',
            fields=[
                ('business_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='test_app.business')),
                ('description', models.TextField(blank=True, default='')),
            ],
            options={{
                'verbose_name_plural': 'Business Extensions',
            }},
            bases=('test_app.business',),
        ),
    ]
}
"""
    
    print(migration_content)
    print("="*80)
    
    # Summary
    if (getattr(Business._meta, 'is_sti_base', False) and 
        getattr(BusinessExtension._meta, 'proxy', False) and
        Business._meta.db_table == BusinessExtension._meta.db_table):
        print("\nüéâ SUCCESS: STI is working correctly!")
        print("   - Business is the STI base model")
        print("   - BusinessExtension is a proxy model")
        print("   - Both models share the same database table")
        print("   - Migration will only create one table")
    else:
        print("\n‚ùå ISSUE: STI is not working correctly")
        print("   - Check the model configurations above")


if __name__ == "__main__":
    analyze_models()